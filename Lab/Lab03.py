# -*- coding: utf-8 -*-
"""Lab3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rs9CGB0WEb4hRzSCE_oqE36FmMUa_Jvq
"""

#Exercise 8:
import numpy as np
p = [2, 1, 3]
P = np.array(p)
print(P)
n = [12, 15, 10, 16, 12],[5, 9, 14, 7, 10],[8, 12, 10, 9, 15]
N = np.array(n)
print()
print(N)
D = P.dot(N)
print()
print("The total sales for each day: ", D)

#Exercise 9:
import numpy as np
t = [0.6, 0.7],[0.4, 0.3]
T = np.array(t)
print("Ma tran T:")
print(T)
print()
p1 = [0.5],[0.5]
p = np.array(p1)
print("Ma tran p:")
print(p)
print()
k = [1, 2, 10, 100, 100000]

print("k =", k)
print()
Tk = np.copy(T)
for k in range(1, 100001):
  pk = np.matmul(Tk,p)
  Tk = np.matmul(Tk,T)
  if (k == 1 or k == 2 or k == 10 or k == 100 or k == 100000):
    print("k = ", k)
    print(pk)
    print()

#Exercise 10:
import numpy as np
a = [-1, 4, 8],[-9, 1, 2]
A = np.array(a)
print("A = ")
print(A)
print()
b = [5, 8],[0, -6],[5, 6]
B = np.array(b)
print("B = ")
print(B)
print()
c = [-4, 1],[6, 5]
C = np.array(c)
print("C = ")
print(C)
print()
d = [-6, 3, 1],[8, 9, -2],[6, -1, 5]
D = np.array(d)
print("D = ")
print(D)
print()
#a
print("a) ")
B1 = B.T
if (len(A) == len(B1[0])):
  print(np.matmul(A, B1))
else:
  print("Impossible")
#b
print()
print("b) ")
C1 = C.T
if (len(B) == len(C1[0])):
  print(np.matmul(B, C1))
else:
  print("Impossible")
#c
print()
print("c) ")
print(C - C1)
#d
print()
print("d) ")
print(D - D.T)
#e
print()
print("e) ")
print((D.T).T)
#f
print()
print("f) ")
print(2*C1)
#g
print()
print("g) ")
print(A.T + B)
#h
print()
print("h) ")
print((A.T + B).T)
#i
print()
print("i) ")
print((2*(A.T) - 5*B).T)
#j
print()
print("j) ")
print((-D).T)
#k
print()
print("k) ")
print(-(D).T)
#l
print()
print("l) ")
print((C**2).T)
#m
print()
print("m) ")
print((C.T)**2)

#Exercise 11:
import numpy as np
a = [2, 4, 1],[6, 7, 2],[3, 5, 9]
A = np.array(a)
print(A)
#b
print('a)')
if(A.shape[1] == A.shape[0]):
  print("Matrix is square")
else:
  print("Matrix is not square")
#b
print('b)')
x = np.allclose(A, A.T)
if(x == True):
  print("Matrix is Symmetric")
else:
  print("Matrix is not Symmetric")
print()
#c
print('c)')
y = np.allclose(A, (A.T)*-1)
if(x == True):
  print("Matrix is Skew - Symmetric")
else:
  print("Matrix is not Skew - Symmetric")
print()
#d
print('d)')
d = np.triu(A)
print(d)
print()
#e
print('e)')
e = np.tril(A)
print(e)

#Exercise 12:
import numpy as np
a = [6, 0, 0, 5],[1, 7, 2, -5],[2, 0, 0, 0],[8, 3, 1, 8]
A = np.array(a)
print("A = ")
print(A)

b = [1, -2, 5, 2],[0, 0, 3, 0],[2, -6, -7, 5],[5, 0, 4, 4]
B = np.array(b)
print("B = ")
print(B)

c = [3, 5, -8, 4],[0, -2, 3, -7],[0, 0, 1, 5],[0, 0, 0, 2]
C = np.array(c)
print("C = ")
print(C)

d = [4, 0, 0, 0],[7, -1, 0, 0],[2, 6, 3, 0],[5, -8, 3, 0],[5, -8, 4, -3]
D = np.array(d)
print("D = ")
print(D)

e = [4, 0, -7, 3, -5],[0, 0, 2, 0, 0],[7, 3, -6, 4, -8],[5, 0, 5, 2, -3],[0, 0, 9, -1, 2]
E = np.array(e)
print("E = ")
print(E)

f = [6, 3, 2, 4, 0],[9, 0, -4, 1, 0],[8, -5, 6, 7, 1],[3, 0, 0, 0, 0],[4, 2, 3, 2, 0]
F = np.array(f)
print("F = ")
print(F)
print()
if(A.shape[1] == A.shape[0]):
  print("a) Matrix is square, determinant = ", np.linalg.det(A))
else:
  print("a) Matrix is not square")
print()
if(B.shape[1] == B.shape[0]):
  print("b) Matrix is square, determinant = ", np.linalg.det(B))
else:
  print("b) Matrix is not square")
print()
if(C.shape[1] == C.shape[0]):
  print("c) Matrix is square, determinant = ", np.linalg.det(C))
else:
  print("c) Matrix is not square")
print()
if(D.shape[1] == D.shape[0]):
  print("d) Matrix is square, determinant", np.linalg.det(D))
else:
  print("d) Matrix is not square")
print()
if(E.shape[1] == E.shape[0]):
  print("e) Matrix is square, determinant = ", np.linalg.det(E))
else:
  print("e) Matrix is not square")
print()
if(F.shape[1] == F.shape[0]):
  print("f) Matrix is square, determinant = ", np.linalg.det(F))
else:
  print("f) Matrix is not square")

#Exercise 13:
import numpy as np

print("It is not true, because : ")

#tao ma tran random
A = np.random.rand(5, 5)
B = np.random.rand(5, 5)

# Tinh det(A + B) - det(A) - det(B)
sum = np.linalg.det(A + B)
det_A = np.linalg.det(A)
det_B = np.linalg.det(B)

result = sum - det_A - det_B
print("Result 5x5:", result)

for n in [3, 4, 6]:
    A = np.random.rand(n, n)
    B = np.random.rand(n, n)

    sum = np.linalg.det(A + B)
    det_A = np.linalg.det(A)
    det_B = np.linalg.det(B)

    result = sum - det_A - det_B
    print(f"Result {n}x{n}:", result)

#Exercise 14:
import numpy as np

print("Yes it true, because : ")

for i in range(1,5):
  print("case ", i)
  A = np.random.rand(3, 3)
  B = np.random.rand(3, 3)

  a = np.linalg.det(np.matmul(A,B))
  b = (np.linalg.det(A))*(np.linalg.det(B))
  kq = a - b;
  print(" detAB - (detA)*(detB) = ", b, " # 0")

#Exercise 15:
import numpy as np
A = np.array([[2, 4, 5/2],[-3/4, 2, 1/4],[1/4, 1/2, 2]])
A_inv = np.linalg.inv(A)
B = np.array([[1, -1/2, 3/4],[3/2, 1/2, -2],[1/4, 1, 1/2]])
B_inv = np.linalg.inv(B)
print("Inverse matrix of A =")
print(A_inv)
print("True result if Multiplication A x A_inv = I")
print(np.matmul(A, A_inv))
print("Inverse matrix of B =")
print(B_inv)
print("True result if Multiplication B x B_inv = I")
print(np.matmul(B, B_inv))
print("a)")
print("Multiplication A_inv x B_inv")
print(np.matmul(A_inv, B_inv))
print("Multiplication (A x B)_inv")
C = np.matmul(A, B)
C_inv = np.linalg.inv(C)
print(C_inv)
print("Multiplication (B x A)_inv")
D = np.matmul(B, A)
D_inv = np.linalg.inv(D)
print(D_inv)
print("b)")
print("(A_inv).T")
print((A_inv).T)
print("(A.T)_inv")
print(np.linalg.inv(A.T))
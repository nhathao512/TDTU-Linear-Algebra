# -*- coding: utf-8 -*-
"""Lab8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11hPva3rSHVuB6nYwrLbPryPCJ2LTecId
"""

#Exercise 1:
import numpy as np
A = np.array([[2, 2],
              [2, 3]])
print("A =")
print(A)
print()
b = [4, 6]
print("b = ")
print(b)
print()
x = np.linalg.lstsq (A, b, rcond=None)[0]
print("x [by 1stsq function] = ", x)
print("x[1] = ", round(x[0], 5))
print("x[2] = ", round(x[1], 5))

#Exercise 2:
import numpy as np
A = np.array([[0, 0, 1],
              [0, 1, 1],
              [1, 2, 1],
              [1, 0, 1],
              [4, 1, 1],
              [4, 2, 1]])
b = [0.5, 1.6, 2.8, 0.8, 5.1, 5.9]
x = np.linalg.lstsq (A, b, rcond=None)[0]
print("x [by 1stsq function] = ", x)
print("c = ", round(x[0], 5))
print("d = ", round(x[1], 5))
print("e = ", round(x[2], 5))

#Exercise 3:
from numpy.linalg.linalg import lstsq
import numpy as np
import matplotlib.pyplot as plt
#a
print('a)')
x1 = np.array([[0, 1, 2, 3],[1, 1, 1, 1]]).T
y1 = [1, 1, 2, 2]
A = np.linalg.lstsq (x1, y1, rcond=None)[0]
a0 = A[0]
a1 = A[1]
print("a0 =", round(A[0], 5))
print("a1 =", round(A[1], 5))
y = lambda x: a0 + a1*x
x_arr= np.arange(-5, 5.1, 0.1)
y_arr = list( map(y, x_arr) )
b = [1, 1, 2, 2]
plt.scatter ([0, 1, 2, 3], b, color="blue", label = "data points")
plt.plot(x_arr, y_arr, "r", label = "least squares line")
plt.title("A least squares line that best fits the given data points")
plt.legend()
plt.show()
#b
print("b)")
x2 = np.array([[1, 2, 4, 5],[1, 1, 1, 1]]).T
y2 = [0, 1, 2, 3]
A = np.linalg.lstsq (x2, y2, rcond=None)[0]
a0 = A[0]
a1 = A[1]
print("a0 =", round(A[0], 5))
print("a1 =", round(A[1], 5))
y = lambda x: a0 + a1*x
x_arr= np.arange(-5, 5.1, 0.1)
y_arr = list( map(y, x_arr) )
b = [0, 1, 2, 3]
plt.scatter ([1, 2, 4, 5], b, color="blue", label = "data points")
plt.plot(x_arr, y_arr, "r", label = "least squares line")
plt.title("A least squares line that best fits the given data points")
plt.legend()
plt.show()
#c
print("c)")
x3 = np.array([[-1, 0, 1, 2],[1, 1, 1, 1]]).T
y3 = [0, 1, 2, 4]
A = np.linalg.lstsq (x3, y3, rcond=None)[0]
a0 = A[0]
a1 = A[1]
print("a0 =", round(A[0], 5))
print("a1 =", round(A[1], 5))
y = lambda x: a0 + a1*x
x_arr= np.arange(-5, 5.1, 0.1)
y_arr = list( map(y, x_arr) )
b = [0, 1, 2, 4]
plt.scatter ([-1, 0, 1, 2], b, color="blue", label = "data points")
plt.plot(x_arr, y_arr, "r", label = "least squares line")
plt.title("A least squares line that best fits the given data points")
plt.legend()
plt.show()
#d
print("d)")
x4 = np.array([[2, 3, 5, 6],[1, 1, 1, 1]]).T
y4 = [3, 2, 1, 0]
A = np.linalg.lstsq (x4, y4, rcond=None)[0]
a0 = A[0]
a1 = A[1]
print("a0 =", round(A[0], 5))
print("a1 =", round(A[1], 5))
y = lambda x: a0 + a1*x
x_arr= np.arange(-5, 5.1, 0.1)
y_arr = list( map(y, x_arr) )
b = [3, 2, 1, 0]
plt.scatter ([2, 3, 5, 6], b, color="blue", label = "data points")
plt.plot(x_arr, y_arr, "r", label = "least squares line")
plt.title("A least squares line that best fits the given data points")
plt.legend()
plt.show()

#Exercise 4:
import numpy as np
import matplotlib.pyplot as plt
Mileage = np.array([2000, 6000, 20000, 30000, 40000])
Friction_Index = np.array([20, 18, 10, 6, 2])

A = np.vstack([Mileage, np.ones(len(Mileage))]).T
m, c = np.linalg.lstsq (A, Friction_Index, rcond=None)[0]
x = np.linspace(0, 45000, 1000)
y = m*x+c
plt.plot(Mileage, Friction_Index, "o", label = "Data points")
plt.plot(x, y, label = 'Line of best fit')
plt.legend()
plt.xlabel('Mileage')
plt.ylabel('Friction Index')
plt.title("Linear Resgression: Mileage vs Friction Index")
plt.show()

print('slope (m): ', round(m, 3))
print('Y-intercept (c): ', round(c, 3))

#Exercise 5:
import numpy as np
import matplotlib.pyplot as plt
A5 = np.array([[np.cos(1), np.sin(1)],
              [np.cos(2), np.sin(2)],
              [np.cos(3), np.sin(3)]])
b5 = [7.9, 5.4, -9]
x5= np.linalg.lstsq (A5, b5, rcond=None) [0]
print("x5 =", x5)
a = x5[0]
b = x5[1]
y = lambda x: a*np.cos(x) + b*np.sin(x)
x_arr= np.arange(0, 4, 0.01)
y_arr = list(map(y, x_arr) )
plt.scatter ([1, 2, 3], b5, color="blue", label = "data points")
plt.plot(x_arr, y_arr, "r", label = "least squares line")
plt.title("A least squares line that best fits the given data points")
plt.legend()
plt.show()
print("end")

#Exercise 6:
import numpy as np
import matplotlib.pyplot as plt
x = np.array([1,2,3,4,5,6])
y = np.array([2.1,3.5,4.2,3.1,4.4,6.8])
A = np.array([[1**3,1**2,1,1],
               [2**3,2**2,2,1],
               [3**3,3**2,3,1],
               [4**3,4**2,4**1,1],
               [5**3,5**2,5,1],
               [6**3,6**2,6,1]])
a,b,c,d = np.linalg.lstsq(A,y,rcond = None)[0]
print(a, b, c, d)

D1 = plt.plot(x,y,'o',label = 'data points',markersize = 10)
x_arr = np.arange(1,6,0.1)
yEq = lambda x: a*x**3 + b*x**2 + c*x + d
y_arr = list(map(yEq, x_arr))
D1 = plt.plot(x_arr, y_arr,'r',label = 'least squares line')
D1 = plt.title("Cau 6")
D1 = plt.legend()
plt.show()

#Exercise 7:
import matplotlib.pyplot as plt

#a
x = [2, 3]
print("a)")
s = ([[2,0],
      [0,2]])
x1 = np.matmul(x,s)
plt.arrow(0, 0, x1[0], x1[1], color='red', width=0.1, label='Transformed')
plt.arrow(0, 0, x[0], x[1], color='b', width=0.1, label='Original')
plt.xlim(-1, 10)
plt.ylim(-1, 10)
plt.title("a")
plt.grid()
plt.legend()
plt.show()

#b
print("b)")
s = ([[0.5,0],
      [0,0.5]])
x1 = np.matmul(x,s)
plt.arrow(0, 0, x[0], x[1], color='b', width=0.1, label='Original')
plt.arrow(0, 0, x1[0], x1[1], color='red', width=0.1, label='Transformed')
plt.xlim(-1, 10)
plt.ylim(-1, 10)
plt.title("b")
plt.grid()
plt.legend()
plt.show()

#c
print("c)")
s = ([[1,0],
      [0,-1]])
x1 = np.matmul(x,s)
plt.arrow(0, 0, x[0], x[1], color='b', width=0.1, label='Original')
plt.arrow(0, 0, x1[0], x1[1], color='red', width=0.1, label='Transformed')
plt.xlim(-1, 10)
plt.ylim(-10, 10)
plt.title("b")
plt.grid()
plt.legend()
plt.show()

#d
print("d)")
s = ([[-1,0],
      [0,1]])
x1 = np.matmul(x,s)
plt.arrow(0, 0, x[0], x[1], color='b', width=0.1, label='Original')
plt.arrow(0, 0, x1[0], x1[1], color='red', width=0.1, label='Transformed')
plt.xlim(-10, 10)
plt.ylim(-10, 10)
plt.title("b")
plt.grid()
plt.legend()
plt.show()

#Exercise 8:
import numpy as np
import matplotlib.pyplot as plt
import math
v = np.array([1, 2])
pi = math.pi

#a
R = np.array([[np.cos(pi), -np.sin(pi)], [np.sin(pi), np.cos(pi)]])

w = R @ v

plt.arrow(0, 0, v[0], v[1], color='b', width=0.1, label='Original')
plt.arrow(0, 0, w[0], w[1], color='r', width=0.1, label='Transformed')
plt.xlim(-3, 3)
plt.ylim(-3, 3)
plt.title("phi = pi")
plt.grid()
plt.legend()
plt.show()

#b
R = np.array([[np.cos(pi/3), -np.sin(pi/3)], [np.sin(pi/3), np.cos(pi/3)]])

w = R @ v

plt.arrow(0, 0, v[0], v[1], color='b', width=0.1, label='Original')
plt.arrow(0, 0, w[0], w[1], color='r', width=0.1, label='Transformed')
plt.xlim(-3, 3)
plt.ylim(-3, 3)
plt.title("phi = pi/3")
plt.grid()
plt.legend()
plt.show()